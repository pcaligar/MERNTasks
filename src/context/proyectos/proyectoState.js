import React, { useReducer } from "react";
//libraries
//import { v4 as uuid } from "uuid";  After build the server, this is no longer necessary because the id is generated by mongodb
import axiosClient from "../../config/axios";
//Context
import proyectoContext from "./proyectoContext";
//Reduce
import proyectoReducer from "./proyectoReducer";
//Types
import {
  FORM_PROJECT,
  GET_PROJECTS,
  ADD_PROJECT,
  VALIDATE_FORM,
  CURRENT_PROJECT,
  DELETE_PROJECT,
  ERROR_PROJECT,
} from "../../types/typesProject";

const ProyectoState = (props) => {
  const initialState = {
    projects: [],
    form: false,
    errorForm: false,
    project: null,
    message: null,
  };

  //Dispatch para ejecutar las acciones
  const [state, dispatch] = useReducer(proyectoReducer, initialState);

  //FUNCTIONS para el CRUD
  const showForm = () => {
    dispatch({
      type: FORM_PROJECT,
    });
  };

  const getProjects = async () => {
    try {
      const response = await axiosClient.get("/api/projects");
      //console.log("response", response.data);

      dispatch({
        type: GET_PROJECTS,
        payload: response.data.projects,
      });
    } catch (error) {
      console.log(error.response);
      console.log(error.response.data.errors);

      const alert = {
        msg: "There was an error",
        category: "alerta-error",
      };

      dispatch({
        type: ERROR_PROJECT,
        payload: alert,
      });
    }
  };

  const addProject = async (newProject) => {
    //proyecto.id = uuid(); After build the server, this is no longer necessary because the id is generated by mongodb

    try {
      const response = await axiosClient.post("/api/projects", newProject);
      //console.log("response", response.data);

      //Add projects to the state
      dispatch({
        type: ADD_PROJECT,
        payload: response.data,
      });
    } catch (error) {
      console.log(error.response);
      console.log(error.response.data.errors);

      const alert = {
        msg: "There was an error",
        category: "alerta-error",
      };

      dispatch({
        type: ERROR_PROJECT,
        payload: alert,
      });
    }
  };

  const showError = () => {
    dispatch({
      type: VALIDATE_FORM,
    });
  };

  const currentProject = (currentProjectId) => {
    dispatch({
      type: CURRENT_PROJECT,
      payload: currentProjectId,
    });
  };

  const deleteProject = async (currentProjectId) => {
    try {
      await axiosClient.delete(`/api/projects/${currentProjectId}`);
      //console.log("response", response.data);

      dispatch({
        type: DELETE_PROJECT,
        payload: currentProjectId,
      });
    } catch (error) {
      console.log(error.response);
      console.log(error.response.data.errors);

      const alert = {
        msg: "There was an error",
        category: "alerta-error",
      };

      dispatch({
        type: ERROR_PROJECT,
        payload: alert,
      });
    }
  };

  return (
    <proyectoContext.Provider
      value={{
        projects: state.projects,
        form: state.form,
        errorForm: state.errorForm,
        project: state.project,
        message: state.message,
        showForm,
        getProjects,
        addProject,
        showError,
        currentProject,
        deleteProject,
      }}
    >
      {props.children}
    </proyectoContext.Provider>
  );
};

export default ProyectoState;
